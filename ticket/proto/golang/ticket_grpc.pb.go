// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: ticket.proto

package ticketproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TicketProto_CreateTicket_FullMethodName = "/TicketProto/CreateTicket"
)

// TicketProtoClient is the client API for TicketProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketProtoClient interface {
	CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error)
}

type ticketProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketProtoClient(cc grpc.ClientConnInterface) TicketProtoClient {
	return &ticketProtoClient{cc}
}

func (c *ticketProtoClient) CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error) {
	out := new(CreateTicketResponse)
	err := c.cc.Invoke(ctx, TicketProto_CreateTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketProtoServer is the server API for TicketProto service.
// All implementations must embed UnimplementedTicketProtoServer
// for forward compatibility
type TicketProtoServer interface {
	CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketResponse, error)
	mustEmbedUnimplementedTicketProtoServer()
}

// UnimplementedTicketProtoServer must be embedded to have forward compatible implementations.
type UnimplementedTicketProtoServer struct {
}

func (UnimplementedTicketProtoServer) CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedTicketProtoServer) mustEmbedUnimplementedTicketProtoServer() {}

// UnsafeTicketProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketProtoServer will
// result in compilation errors.
type UnsafeTicketProtoServer interface {
	mustEmbedUnimplementedTicketProtoServer()
}

func RegisterTicketProtoServer(s grpc.ServiceRegistrar, srv TicketProtoServer) {
	s.RegisterService(&TicketProto_ServiceDesc, srv)
}

func _TicketProto_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketProtoServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketProto_CreateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketProtoServer).CreateTicket(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketProto_ServiceDesc is the grpc.ServiceDesc for TicketProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TicketProto",
	HandlerType: (*TicketProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicket",
			Handler:    _TicketProto_CreateTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticket.proto",
}
