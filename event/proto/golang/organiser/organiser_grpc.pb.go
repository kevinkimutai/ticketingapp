// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: organiser.proto

package organiserproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Organiser_CreateOrganiser_FullMethodName = "/Organiser/CreateOrganiser"
)

// OrganiserClient is the client API for Organiser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganiserClient interface {
	CreateOrganiser(ctx context.Context, in *CreateOrganiserRequest, opts ...grpc.CallOption) (*CreateOrganiserResponse, error)
}

type organiserClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganiserClient(cc grpc.ClientConnInterface) OrganiserClient {
	return &organiserClient{cc}
}

func (c *organiserClient) CreateOrganiser(ctx context.Context, in *CreateOrganiserRequest, opts ...grpc.CallOption) (*CreateOrganiserResponse, error) {
	out := new(CreateOrganiserResponse)
	err := c.cc.Invoke(ctx, Organiser_CreateOrganiser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganiserServer is the server API for Organiser service.
// All implementations must embed UnimplementedOrganiserServer
// for forward compatibility
type OrganiserServer interface {
	CreateOrganiser(context.Context, *CreateOrganiserRequest) (*CreateOrganiserResponse, error)
	mustEmbedUnimplementedOrganiserServer()
}

// UnimplementedOrganiserServer must be embedded to have forward compatible implementations.
type UnimplementedOrganiserServer struct {
}

func (UnimplementedOrganiserServer) CreateOrganiser(context.Context, *CreateOrganiserRequest) (*CreateOrganiserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganiser not implemented")
}
func (UnimplementedOrganiserServer) mustEmbedUnimplementedOrganiserServer() {}

// UnsafeOrganiserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganiserServer will
// result in compilation errors.
type UnsafeOrganiserServer interface {
	mustEmbedUnimplementedOrganiserServer()
}

func RegisterOrganiserServer(s grpc.ServiceRegistrar, srv OrganiserServer) {
	s.RegisterService(&Organiser_ServiceDesc, srv)
}

func _Organiser_CreateOrganiser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganiserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganiserServer).CreateOrganiser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Organiser_CreateOrganiser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganiserServer).CreateOrganiser(ctx, req.(*CreateOrganiserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Organiser_ServiceDesc is the grpc.ServiceDesc for Organiser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Organiser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Organiser",
	HandlerType: (*OrganiserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganiser",
			Handler:    _Organiser_CreateOrganiser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "organiser.proto",
}
